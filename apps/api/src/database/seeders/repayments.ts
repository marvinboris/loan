import { Loan, Repayment, TradingStatus } from '../models';

// Repayment Seeder
export async function seedRepayments() {
  console.log('ðŸŒ± Seeding Repayments...');

  const loan1 = await Loan.findOne();
  const loan2 = await Loan.findOne({ offset: 1 });
  const loan3 = await Loan.findOne({ offset: 2 });
  const loan4 = await Loan.findOne({ offset: 3 });
  const loan5 = await Loan.findOne({ offset: 4 });

  const repayments = [
    {
      repaymentNumber: 'REP001',
      loanId: loan1.get('id'),
      repaymentAmount: 50000,
      realAmount: 50000,
      tradingStatus: TradingStatus.SUCCESS,
      repaymentCodeVaLink: 'https://payment.com/rep001',
      paymentChannel: 'Mobile Money',
      creationTime: new Date('2024-01-15 10:00:00'),
      paybackTime: new Date('2024-01-15 10:05:00'),
      paymentCompanySerialNumber: 'PAY001',
      collectorId: 4,
      latestFollowUpTime: new Date('2024-01-16 09:00:00'),
      followUpResults: 'Payment confirmed',
      descFollowUp: 'Customer paid on time',
      whetherAssigned: true,
    },
    {
      repaymentNumber: 'REP002',
      loanId: loan1.get('id'),
      repaymentAmount: 50000,
      realAmount: 50000,
      tradingStatus: TradingStatus.SUCCESS,
      repaymentCodeVaLink: 'https://payment.com/rep002',
      paymentChannel: 'Bank Transfer',
      creationTime: new Date('2024-02-15 14:30:00'),
      paybackTime: new Date('2024-02-15 14:32:00'),
      paymentCompanySerialNumber: 'PAY002',
      collectorId: 4,
      latestFollowUpTime: new Date('2024-02-16 08:30:00'),
      followUpResults: 'Payment confirmed',
      descFollowUp: 'Second payment received',
      whetherAssigned: true,
    },
    {
      repaymentNumber: 'REP003',
      loanId: loan2.get('id'),
      repaymentAmount: 100000,
      realAmount: 100000,
      tradingStatus: TradingStatus.SUCCESS,
      repaymentCodeVaLink: 'https://payment.com/rep003',
      paymentChannel: 'Mobile Money',
      creationTime: new Date('2024-01-10 11:00:00'),
      paybackTime: new Date('2024-01-10 11:03:00'),
      paymentCompanySerialNumber: 'PAY003',
      collectorId: 5,
      latestFollowUpTime: new Date('2024-01-11 10:00:00'),
      followUpResults: 'Payment confirmed',
      descFollowUp: 'Initial payment for business loan',
      whetherAssigned: true,
    },
    {
      repaymentNumber: 'REP004',
      loanId: loan2.get('id'),
      repaymentAmount: 100000,
      realAmount: 100000,
      tradingStatus: TradingStatus.SUCCESS,
      repaymentCodeVaLink: 'https://payment.com/rep004',
      paymentChannel: 'Bank Transfer',
      creationTime: new Date('2024-02-10 15:00:00'),
      paybackTime: new Date('2024-02-10 15:05:00'),
      paymentCompanySerialNumber: 'PAY004',
      collectorId: 5,
      latestFollowUpTime: new Date('2024-02-11 09:30:00'),
      followUpResults: 'Payment confirmed',
      descFollowUp: 'Second payment for business loan',
      whetherAssigned: true,
    },
    {
      repaymentNumber: 'REP005',
      loanId: loan3.get('id'),
      repaymentAmount: 50000,
      realAmount: 50000,
      tradingStatus: TradingStatus.SUCCESS,
      repaymentCodeVaLink: 'https://payment.com/rep005',
      paymentChannel: 'Mobile Money',
      creationTime: new Date('2024-01-20 12:00:00'),
      paybackTime: new Date('2024-01-20 12:02:00'),
      paymentCompanySerialNumber: 'PAY005',
      collectorId: 4,
      latestFollowUpTime: new Date('2024-01-21 08:00:00'),
      followUpResults: 'Payment confirmed',
      descFollowUp: 'Partial payment for emergency loan',
      whetherAssigned: true,
    },
    {
      repaymentNumber: 'REP006',
      loanId: loan4.get('id'),
      repaymentAmount: 75000,
      realAmount: 75000,
      tradingStatus: TradingStatus.PENDING,
      repaymentCodeVaLink: 'https://payment.com/rep006',
      paymentChannel: 'Bank Transfer',
      creationTime: new Date('2024-02-01 16:00:00'),
      paybackTime: null,
      paymentCompanySerialNumber: 'PAY006',
      collectorId: 5,
      latestFollowUpTime: new Date('2024-02-05 10:00:00'),
      followUpResults: 'Payment pending',
      descFollowUp: 'Customer initiated payment, awaiting confirmation',
      whetherAssigned: true,
    },
    {
      repaymentNumber: 'REP007',
      loanId: loan4.get('id'),
      repaymentAmount: 75000,
      realAmount: 75000,
      tradingStatus: TradingStatus.SUCCESS,
      repaymentCodeVaLink: 'https://payment.com/rep007',
      paymentChannel: 'Mobile Money',
      creationTime: new Date('2024-02-15 13:00:00'),
      paybackTime: new Date('2024-02-15 13:03:00'),
      paymentCompanySerialNumber: 'PAY007',
      collectorId: 5,
      latestFollowUpTime: new Date('2024-02-16 09:00:00'),
      followUpResults: 'Payment confirmed',
      descFollowUp: 'Second payment received',
      whetherAssigned: true,
    },
    {
      repaymentNumber: 'REP008',
      loanId: loan5.get('id'),
      repaymentAmount: 200000,
      realAmount: 200000,
      tradingStatus: TradingStatus.SUCCESS,
      repaymentCodeVaLink: 'https://payment.com/rep008',
      paymentChannel: 'Bank Transfer',
      creationTime: new Date('2024-01-20 10:00:00'),
      paybackTime: new Date('2024-01-20 10:01:00'),
      paymentCompanySerialNumber: 'PAY008',
      collectorId: 4,
      latestFollowUpTime: new Date('2024-01-21 08:00:00'),
      followUpResults: 'Payment confirmed',
      descFollowUp: 'Large payment from VIP customer',
      whetherAssigned: true,
    },
    {
      repaymentNumber: 'REP009',
      loanId: loan5.get('id'),
      repaymentAmount: 200000,
      realAmount: 200000,
      tradingStatus: TradingStatus.SUCCESS,
      repaymentCodeVaLink: 'https://payment.com/rep009',
      paymentChannel: 'Bank Transfer',
      creationTime: new Date('2024-02-20 11:00:00'),
      paybackTime: new Date('2024-02-20 11:02:00'),
      paymentCompanySerialNumber: 'PAY009',
      collectorId: 4,
      latestFollowUpTime: new Date('2024-02-21 09:00:00'),
      followUpResults: 'Payment confirmed',
      descFollowUp: 'Second large payment from VIP customer',
      whetherAssigned: true,
    },
  ];

  for (const repaymentData of repayments) {
    await Repayment.findOrCreate({
      where: { repaymentNumber: repaymentData.repaymentNumber },
      defaults: repaymentData,
    }).catch((err) => {
      console.log(err);
    });
  }

  console.log('âœ… Repayments seeded successfully');
}
